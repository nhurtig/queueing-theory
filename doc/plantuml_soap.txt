@startuml





/' Objects '/

class DataStore {
	+DataStore()
	+dumpJobs() : std::list<DeadJob>
	+getJobs() : std::list<DeadJob>
	-jobs : std::list<DeadJob>
	+addJob(Job*, real) : void
	+toCSV(std::string fname) : void
}


class DeadJob {
	+DeadJob(Job*, real)
	+arrivalTime : real
	+finishTime : real
	+serviceReq : real
	+{static} header : static std::string
	+{static} lineSep : static std::string
	+{static} sep : static std::string
	+id : unsigned int
	+toCSV(std::ofstream* stream) : void
}


class DegenerateDistribution {
	+DegenerateDistribution(real x)
	+cdf(real) : real
	+sample() : real
	-x : real
}


class DiscreteDistribution {
	+DiscreteDistribution(std::vector<real> vals, std::vector<real> probs)
	+cdf(real) : real
	+sample() : real
	-probs : std::vector<real>
	-vals : std::vector<real>
	-size : unsigned int
}


abstract class Distribution {
	+{abstract} cdf(real) : real
	+{abstract} sample() : real
}


class ExponentialDistribution {
	+ExponentialDistribution(real)
	+cdf(real) : real
	-lambda : real
	+sample() : real
}


class FCFSPolicy {
	-getIndex(Job* job) : real
	-timeTil(const Job* job, real bound) : real
}


class FiniteIndepStream {
	+FiniteIndepStream(Distribution* in, std::vector<Distribution*> serv, std::vector<real> probs)
	+popJob(real) : Job
	-classSize : jclass
	-dists : std::vector<Distribution*>
	-probs : std::vector<real>
}


abstract class IndepStream {
	#inDist : Distribution*
	+reset() : void
}


class IndexedJob {
	+IndexedJob(Policy* p, Job job)
	+job : Job
	-p : Policy*
	+closeTo(const IndexedJob other) : bool {query}
	+operator<(const IndexedJob& other) : bool {query}
	+getRequired() : real {query}
	+nextInterrupt() : real {query}
	+rank : real
	+getID() : unsigned int {query}
	+serve(real time) : void
	+show() : void {query}
}


class Job {
	+Job(real age, real required)
	+age : real
	+arrivalTime : real
	+getRequired() : real {query}
	+nextInterrupt() : real {query}
	-required : real
	+{static} nextID : static unsigned int
	+getID() : unsigned int {query}
	+id : unsigned int
	+serve(real time) : void
	+show() : void {query}
}


abstract class JobInterface {
	+done() : bool {query}
	+operator==(const JobInterface& other) : bool {query}
	+{abstract} getRequired() : real {query}
	+{abstract} nextInterrupt() : real {query}
	+{abstract} getID() : unsigned int {query}
	+{abstract} serve(real time) : void
	+{abstract} show() : void {query}
}


abstract class Policy {
	+{abstract} getIndex(Job* job) : real
	+{abstract} timeTil(const Job* job, real bound) : real
}


class PolicyManager {
	+PolicyManager(unsigned int k, Policy* policy)
	+getJob() : Job
	-policy : Policy*
	-hasChanged : bool
	+hasJob() : bool
	+nextInterrupt() : real
	-queued : std::priority_queue<IndexedJob>
	-serving : std::vector<IndexedJob>
	-sharedServing : std::vector<IndexedJob>
	-completedJobs : std::vector<Job>
	-k : unsigned int
	-size() : unsigned int {query}
	+addJob(Job job) : void
	-recalculate() : void
	+serve(real time) : void
	-serveEach(std::vector<IndexedJob>& toServe, real time) : void
	-show() : void
}


class SingleIndepStream {
	+SingleIndepStream(Distribution* in, Distribution* serv)
	-dist : Distribution*
	+popJob(real) : Job
	+hasJob() : bool
}


abstract class Stream {
	+{abstract} popJob(real) : Job
	+{abstract} hasJob() : bool
	+nextInterrupt() : real
	#timeLeft : real
	+{abstract} reset() : void
	+serve(real time) : void
}


class System {
	+System(Stream* stream, Policy* policy, unsigned int k)
	-data : DataStore
	-policyManager : PolicyManager
	-stream : Stream*
	-time : real
	+getData() : std::list<DeadJob>
	-k : unsigned int
	-run(real time, bool record) : void
	+runFor(real ignore_time, real record_time) : void
	-runStep(bool record) : void
	+toCSV(std::string fname) : void
}


class IndexedJob::ReverseComparator {
	+operator()(const IndexedJob& lhs, const IndexedJob& rhs) : bool {query}
}


class JobInterface::HashFunction {
	+operator()(const JobInterface& job) : std :: size_t {query}
}





/' Inheritance relationships '/

.Distribution <|-- .DegenerateDistribution


.Distribution <|-- .DiscreteDistribution


.Distribution <|-- .ExponentialDistribution


.IndepStream <|-- .FiniteIndepStream


.IndepStream <|-- .SingleIndepStream


.JobInterface <|-- .IndexedJob


.JobInterface <|-- .Job


.Policy <|-- .FCFSPolicy


.Stream <|-- .IndepStream





/' Aggregation relationships '/

.DataStore *-- .DeadJob


.FiniteIndepStream o-- .Distribution


.IndepStream o-- .Distribution


.IndexedJob *-- .Job


.IndexedJob o-- .Policy


.PolicyManager "3" *-- .IndexedJob


.PolicyManager *-- .Job


.PolicyManager o-- .Policy


.SingleIndepStream o-- .Distribution


.System *-- .DataStore


.System *-- .PolicyManager


.System o-- .Stream






/' Nested objects '/

.IndexedJob +-- .IndexedJob::ReverseComparator


.JobInterface +-- .JobInterface::HashFunction




@enduml
