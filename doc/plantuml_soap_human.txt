@startuml

skinparam class {
    'FontName Courier
    'FontSize 12
    BorderThickness 1.5
	ArrowThickness 1.5
	ArrowFontSize 20
}

/' Objects '/

class DataStore {
	+addJob(Job* job, real finishTime) : void
	+toCSV(String fname) : void
}

class FinishedJob {
	+arrivalTime : real
	+finishTime : real
	+serviceReq : real
	+toCSV(ofstream* stream) : void
}

/'
class DegenerateDistribution {
	+DegenerateDistribution(real x)
	+cdf(real) : real
	+sample() : real
	-x : real
}


class DiscreteDistribution {
	+DiscreteDistribution(std::vector<real> vals, std::vector<real> probs)
	+cdf(real) : real
	+sample() : real
	-probs : std::vector<real>
	-vals : std::vector<real>
	-size : unsigned int
}


class DiscreteGittinsPolicy {
	+DiscreteGittinsPolicy(std::vector<real> vals, std::vector<real> probs)
	-getIndex(Job* job) : real
	-timeTil(const Job* job, real bound) : real
	-timeTilIncrease(const Job* job) : real
	-probs : std::vector<real>
	-vals : std::vector<real>
	-size : unsigned int
}


class DiscreteGittinsSlowdownPolicy {
	+DiscreteGittinsSlowdownPolicy(std::vector<real> vals, std::vector<real> probs)
	-getIndex(Job* job) : real
	-timeTil(const Job* job, real bound) : real
	-timeTilIncrease(const Job* job) : real
	-probs : std::vector<real>
	-vals : std::vector<real>
	-size : unsigned int
}
'/

abstract class Distribution {
	+{abstract}sample() : real
}

/'
class ExponentialDistribution {
	+ExponentialDistribution(real)
	+cdf(real) : real
	-lambda : real
	+sample() : real
}


class FCFSPolicy {
	-getIndex(Job* job) : real
	-timeTil(const Job* job, real bound) : real
	-timeTilIncrease(const Job* job) : real
}


class FiniteIndepStream {
	+FiniteIndepStream(Distribution* in, std::vector<Distribution*> serv, std::vector<real> probs)
	+popJob(real) : Job
	-classSize : jclass
	-dists : std::vector<Distribution*>
	-probs : std::vector<real>
}

'/
/'
abstract class IndepStream {
	#inDist : Distribution*
	+reset() : void
}


class IndexedJob {
	+IndexedJob(Policy* p, Job job)
	+job : Job
	-p : Policy*
	+closeTo(const IndexedJob other) : bool {query}
	+operator<(const IndexedJob& other) : bool {query}
	+getRequired() : real {query}
	+nextInterrupt() : real {query}
	+rank : real
	+getID() : unsigned int {query}
	+serve(real time) : void
	+show() : void {query}
}

'/
class Job {
	-required : real
	+age : real
	+arrivalTime : real
	+nextInterrupt() : real
	+serve(real time) : void
}

/'
abstract class JobInterface {
	+done() : bool {query}
	+operator==(const JobInterface& other) : bool {query}
	+{abstract} getRequired() : real {query}
	+{abstract} nextInterrupt() : real {query}
	+{abstract} getID() : unsigned int {query}
	+{abstract} serve(real time) : void
	+{abstract} show() : void {query}
}

'/
abstract class Policy {
	+{abstract} getIndex(Job* job) : real
}

abstract class PolicyManager {
	+nextInterrupt() : real
	-queued : priority_queue<Job>
	+addJob(Job job) : void
	+{abstract}serve(real time) : void
}
/'


class SingleIndepStream {
	+SingleIndepStream(Distribution* in, Distribution* serv)
	-dist : Distribution*
	+popJob(real) : Job
	+hasJob() : bool
}

'/
class Stream {
	+popJob(real) : Job
	+nextInterrupt() : real
	+serve(real time) : void
}
/'

'/
class System {
	-k : unsigned int
	+run(real time) : void
	+toCSV(String fname) : void
}
/'


class IndexedJob::ReverseComparator {
	+operator()(const IndexedJob& lhs, const IndexedJob& rhs) : bool {query}
}


class JobInterface::HashFunction {
	+operator()(const JobInterface& job) : std :: size_t {query}
}
'/




/' Inheritance relationships '/
/'
.Distribution <|-- .DegenerateDistribution


.Distribution <|-- .DiscreteDistribution


.Distribution <|-- .ExponentialDistribution

.IndepStream <|-- .FiniteIndepStream


.IndepStream <|-- .SingleIndepStream


.JobInterface <|-- .IndexedJob


.JobInterface <|-- .Job


.Policy <|-- .DiscreteGittinsPolicy


.Policy <|-- .DiscreteGittinsSlowdownPolicy


.Policy <|-- .FCFSPolicy

'/



/' Aggregation relationships '/

.DataStore -->"*" .FinishedJob


'.FiniteIndepStream o-- .Distribution


.Stream --> .Distribution


.PolicyManager -->"*" .Job


.PolicyManager --> .Policy



.System --> .Stream

.System --> .PolicyManager

.System --> .DataStore


@enduml
